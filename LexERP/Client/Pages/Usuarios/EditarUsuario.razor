@page "/usuarios/editar/{Id:int}"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "admin")]


@if (item == null)
{
    <Cargando />
}
else
{
    <h3>Editar @item.FullName2</h3>
    <div>
        <button @onclick="@(()=>EliminarRegistro(item.Id))" class="btn btn-primary">Borrar usuario</button>
        <br />
        <br />
    </div>

    <FormularioUsuario Usuario="item"
                       ModoEdicion=true
                       OnValidSubmit="Guardar" />
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public int Id { get; set; }

    private UsuarioDTO item;

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<UsuarioDTO>($"api/usuarios/{Id}");

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            item = httpResponse.Response;
        }
    }

    private async Task Guardar()
    {
        var httpResponse = await repositorio.Put("api/usuarios", item);

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            navigationManager.NavigateTo("/usuarios");
        }
    }

    private async Task EliminarRegistro(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmarEliminacion.Texto), $"¿Está seguro de que quiere eliminar el usuario {item.FullName2.ToUpper()}?");

        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            HideHeader = true
        };

        var confirmationModal = Modal.Show<ConfirmarEliminacion>("", parameters, options);
        var result = await confirmationModal.Result;

        if (!result.Cancelled)
        {
            var httpResponse = await repositorio.Delete($"api/usuarios/{id}");

            if (httpResponse.Error)
            {
                await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
            }
            else
            {
                navigationManager.NavigateTo("/usuarios");
            }
        }
    }
}

@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes

@if (!inicializado)
{
    <Cargando />
}
else
{
    <hr />
    <h5>
        <span class="oi oi-cart" aria-hidden="true"></span>
        Márquetin
    </h5>

    <div class="row">
        @if (Item.Persona.Tipo == TipoPersona.Física)
        {
            <div class="col-sm-4">
                <div class="form-group">
                    <label>Fecha nacimiento:</label>
                    <div>
                        <InputDate class="form-control" @bind-Value="@Item.Persona.FechaNacimiento" />
                        <ValidationMessage For="@(() => Item.Persona.FechaNacimiento)" />
                    </div>
                </div>
            </div>
        }
        <div class="col-sm-4">
            <div class="form-group">
                <label>Número de empleados</label>
                <div>
                    <InputNumber class="form-control" @bind-Value="@Item.Empleados" />
                    <ValidationMessage For="@(() => Item.Empleados)" />
                </div>
            </div>

        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label>Volumen facturación:</label>
                <div>
                    <InputNumber class="form-control" @bind-Value="@Item.ValorFacturacion" />
                    <ValidationMessage For="@(() => Item.ValorFacturacion)" />
                </div>
            </div>

        </div>
    </div>



    <div class="row">
        <div class="col-12 col-md-6">
            <ListadoGenerico Listado="Item.Persona.Sectores">
                <NoHayRegistros>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th><span class="oi oi-tags" aria-hidden="true"></span> Sectores</th>
                            </tr>
                        </thead>
                    </table>
                    <text>No hay registros para mostrar</text>
                </NoHayRegistros>
                <HayRegistrosCompleto>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th><span class="oi oi-tags" aria-hidden="true"></span> Sectores</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Item.Persona.Sectores.OrderBy(x => x.Descripcion))
                                {
                                <tr>
                                    <td>@item.Descripcion</td>
                                    <td><a @onclick="@(() => Item.Persona.Sectores.Remove(item))" @onclick:stopPropagation="true"><span class="oi oi-trash" aria-hidden="true"></span></a></td>
                                </tr>
                                }
                        </tbody>
                    </table>
                </HayRegistrosCompleto>
            </ListadoGenerico>
            <hr />
            <div class="form-inline">
                <button class="btn btn-primary" @onclick="AddSector"><span class="oi oi-plus" aria-hidden="true"></span></button>
                <select class="form-control" @bind="@sectorId">
                    @foreach (var item in ListaSectores.OrderBy(x => x.Descripcion))
                    {
                        <option value="@item.Id">@item.Descripcion</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-12 col-md-6">
            <ListadoGenerico Listado="Item.Servicios">
                <NoHayRegistros>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th><span class="oi oi-target" aria-hidden="true"></span> Servicios</th>
                            </tr>
                        </thead>
                    </table>
                    <text>No hay registros para mostrar</text>
                </NoHayRegistros>
                <HayRegistrosCompleto>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th><span class="oi oi-target" aria-hidden="true"></span> Servicios</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Item.Servicios.OrderBy(x => x.Descripcion))
                                {
                                <tr>
                                    <td>@item.Descripcion</td>
                                    <td><a @onclick="@(() => Item.Servicios.Remove(item))" @onclick:stopPropagation="true"><span class="oi oi-trash" aria-hidden="true"></span></a></td>
                                </tr>
                                }
                        </tbody>
                    </table>
                </HayRegistrosCompleto>
            </ListadoGenerico>
            <hr />
            <div class="form-inline">
                <button class="btn btn-primary" @onclick="AddServicio"><span class="oi oi-plus" aria-hidden="true"></span></button>
                <select class="form-control" @bind="@servicioId">
                    @foreach (var item in ListaServicios.OrderBy(x => x.Descripcion))
                    {
                        <option value="@item.Id">@item.Descripcion</option>
                    }
                </select>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public ClienteDTO Item { get; set; }
    [Parameter] public List<SectorDTO> ListaSectores { get; set; }
    [Parameter] public List<ServicioDTO> ListaServicios { get; set; }

    private bool inicializado = false;

    private int sectorId;
    private int servicioId;

    protected async override Task OnInitializedAsync()
    {
        if (ListaSectores == null)
        {
            await CargarSectores();
        }

        if (ListaServicios == null)
        {
            await CargarServicios();
        }

        inicializado = true;
    }

    private async Task CargarSectores()
    {
        var httpResponse = await repositorio.Get<List<SectorDTO>>("api/sectores/lista");

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            ListaSectores = httpResponse.Response;
        }
    }

    private async Task CargarServicios()
    {
        var httpResponse = await repositorio.Get<List<ServicioDTO>>("api/servicios/lista");

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            ListaServicios = httpResponse.Response;
        }
    }

    private void AddSector()
    {
        if (sectorId != 0 && !Item.Persona.Sectores.Any(x=>x.Id == sectorId))
        {
            Item.Persona.Sectores.Add(new SectorDTO { Id = sectorId, Descripcion = ListaSectores.FirstOrDefault(x => x.Id == sectorId).Descripcion, Activo = true });
        }
    }

    private void AddServicio()
    {
        if (servicioId != 0 && !Item.Servicios.Any(x=>x.Id==servicioId))
        {
            Item.Servicios.Add(new ServicioDTO { Id = servicioId, Descripcion = ListaServicios.FirstOrDefault(x => x.Id == servicioId).Descripcion, Activo = true });
        }
    }

}

@if (Listado == null || Tipos == null)
{
    <Cargando />
}
else
{
    <hr />
    <h5>
        <span class="oi oi-list" aria-hidden="true"></span>
        Datos contacto
        &nbsp; <button class="btn btn-primary" @onclick="@(() => AddItem())"><span class="oi oi-plus" aria-hidden="true"></span></button>
    </h5>

    <ListadoGenerico Listado="Listado">
        <NoHayRegistros>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Descripción</th>
                        <th>Valor</th>
                        <th>Observaciones</th>
                    </tr>
                </thead>
            </table>
            <br />
            <text>No hay registros para mostrar</text>
        </NoHayRegistros>
        <HayRegistrosCompleto>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Descripción</th>
                        <th>Valor</th>
                        <th>Observaciones</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Listado.OrderBy(x => x.TipoContacto.Clase))
                        {
                        <tr @onclick="@(() => EditItem(item))" style="cursor:pointer;">
                            <td>@Tipos.FirstOrDefault(x=>x.Id==item.TipoContacto.Id).Descripcion</td>
                            <td>@item.Valor</td>
                            <td>@item.Observaciones</td>
                            <td><a @onclick="@(() => Listado.Remove(item))" @onclick:stopPropagation="true"><span class="oi oi-trash" aria-hidden="true"></span></a></td>
                        </tr>
                        }
                </tbody>
            </table>
        </HayRegistrosCompleto>
    </ListadoGenerico>
}

@code {
    [Parameter] public List<DatoContactoDTO> Listado { get; set; }
    [Parameter] public List<TipoContactoDTO> Tipos { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    private async Task AddItem()
    {
        var nuevoDatoContacto = new DatoContactoDTO();

        if (await ModalShow(nuevoDatoContacto))
        {
            Listado.Add(nuevoDatoContacto);
        }
    }

    private async Task EditItem(DatoContactoDTO datoContacto)
    {
        var DatoContactoDTOUpdate = new DatoContactoDTO
        {
            Id = datoContacto.Id,
            Activo = datoContacto.Activo,
            TipoContacto = new TipoContactoDTO {Id=datoContacto.TipoContacto.Id },
            Valor = datoContacto.Valor,
            Observaciones = datoContacto.Observaciones
        };

        if (await ModalShow(DatoContactoDTOUpdate))
        {
            datoContacto.Activo = DatoContactoDTOUpdate.Activo;
            datoContacto.TipoContacto.Id = DatoContactoDTOUpdate.TipoContacto.Id;
            datoContacto.Valor = DatoContactoDTOUpdate.Valor;
            datoContacto.Observaciones = DatoContactoDTOUpdate.Observaciones;
        }
    }

    private async Task<bool> ModalShow(DatoContactoDTO datoContacto)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DatosContactoFormulario.Item), datoContacto);
        parameters.Add(nameof(DatosContactoFormulario.Tipos), Tipos);

        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            HideHeader = true
        };

        var datoContactoModal = Modal.Show<DatosContactoFormulario>("", parameters, options);
        var result = await datoContactoModal.Result;

        return !result.Cancelled;
    }
}

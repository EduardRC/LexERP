@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensajes

@if (!inicializado)
{
    <Cargando />
}
else
{
    <EditForm Model="Item">
        @*OnValidSubmit="OnValidSubmit"*@
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-sm-12 col-lg-8 col-xl-6">

                @if (ModoEdicion)
                {
                    <div class="form-inline">
                        <div>
                            <InputCheckbox class="form-control" @bind-Value="@Item.Activo" />
                            <ValidationMessage For="@(() => Item.Activo)" />
                        </div>
                        &nbsp; <label>Tarífa activa</label>
                    </div>
                }

                <div class="form-group">
                    <label>Empresa:</label>
                    <div>
                        <select class="form-control mb-2 mr-sm-2" @bind="@Item.Empresa.Id">
                            @foreach (var empresa in empresas)
                            {
                                <option value="@empresa.Id">@empresa.RazonSocial</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label>Abreviatura:</label>
                    <div>
                        <InputText class="form-control" @bind-Value="@Item.Abreviatura" />
                        <ValidationMessage For="@(() => Item.Abreviatura)" />
                    </div>
                </div>

                <div class="form-group">
                    <label>Descripcion:</label>
                    <div>
                        <InputText class="form-control" @bind-Value="@Item.Descripcion" />
                        <ValidationMessage For="@(() => Item.Descripcion)" />
                    </div>
                </div>

            </div>
            <div class="col-sm-12 col-lg-4 col-xl-6">

                <div class="form-inline">
                    <div>
                        <InputCheckbox class="form-control" @bind-Value="@Item.Predeterminada" />
                        <ValidationMessage For="@(() => Item.Predeterminada)" />
                    </div>
                    &nbsp; <label>Tarifa predeterminada</label>
                </div>

                <div class="form-group">
                    <label>Observaciones:</label>
                    <div>
                        <InputTextArea rows="8" class="form-control" @bind-Value="@Item.Observaciones" />
                        <ValidationMessage For="@(() => Item.Observaciones)" />
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-12 col-lg-2">
                <h4>Detalle</h4>
                <button class="btn btn-primary" @onclick="@(()=>CrearDetalle())">+</button>
                @*<button class="btn btn-primary" @onclick="@(()=>EliminarRegistro(1))">+</button>*@

            </div>
            <div class="col-sm-12 col-lg-10">
                <ListadoGenerico Listado="detalles">
                    <NoHayRegistros>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Fecha inicio</th>
                                    <th>Categoría</th>
                                    <th>Usuario</th>
                                    <th>Precio hora</th>
                                </tr>
                            </thead>
                        </table>
                        <br />
                        <text>No hay registros para mostrar</text>
                    </NoHayRegistros>
                    <HayRegistrosCompleto>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Fecha inicio</th>
                                    <th>Categoría</th>
                                    <th>Usuario</th>
                                    <th>Precio hora</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in detalles.OrderBy(x => x.Categoria.Descripcion)
                                  .ThenBy(x => x.Usuario.Nombre)
                                  .ThenBy(x => x.Fecha))
                                    {
                                    <tr @onclick="@(()=>EditarDetalle(detalle))" style="cursor:pointer;">
                                        <td>@detalle.Fecha.ToShortDateString()</td>
                                        <td>@detalle.Categoria.Descripcion</td>
                                        <td>@detalle.Usuario.Nombre</td>
                                        <td>@detalle.ImporteHora.ToString("#,##0.00")</td>
                                        <td><a @onclick="@(()=>detalles.Remove(detalle))" @onclick:stopPropagation="true"><span class="oi oi-trash" aria-hidden="true"></span></a></td>
                                    </tr>
                                    }
                            </tbody>
                        </table>
                    </HayRegistrosCompleto>
                </ListadoGenerico>
            </div>
        </div>
        <hr />
        @*<button class="btn btn-primary" type="submit">Guardar</button>*@
        <button class="btn btn-primary" @onclick="@Guardar">Guardar</button>
    </EditForm>
}

@code {
    [Parameter] public TarifaDTO Item { get; set; }
    [Parameter] public Boolean ModoEdicion { get; set; } = false;
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    private bool inicializado = false;

    private List<EmpresaDTOlist> empresas;
    private List<TarifaDetalleDTO> detalles;
    private List<CategoriaDTO> categorias;
    private List<UsuarioDTOlist> usuarios;

    protected async override Task OnInitializedAsync()
    {
        await CargarEmpresas();

        detalles = Item.Detalle.ToList();

        await CargarCategorias();
        await CargarUsuarios();

        inicializado = true;
    }

    private async Task CargarEmpresas()
    {
        var httpResponse = await repositorio.Get<List<EmpresaDTOlist>>("api/empresas/lista");

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            empresas = httpResponse.Response;
        }
    }

    private async Task CargarCategorias()
    {
        var httpResponse = await repositorio.Get<List<CategoriaDTO>>("api/categorias/lista");

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            categorias = httpResponse.Response;
        }
    }

    private async Task CargarUsuarios()
    {
        var httpResponse = await repositorio.Get<List<UsuarioDTOlist>>("api/usuarios/lista");

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            usuarios = httpResponse.Response;
        }
    }

    public async Task EditarDetalle(TarifaDetalleDTO detalle)
    {
        var detalleUpdate = new TarifaDetalleDTO
        {
            Id = detalle.Id,
            Categoria = new CategoriaDTOmin { Id = detalle.Categoria.Id },
            Usuario = new UsuarioDTOmin { Id = detalle.Usuario.Id },
            Activo = detalle.Activo,
            ImporteHora = detalle.ImporteHora,
            Fecha = detalle.Fecha
        };

        if (await ModalShow(detalleUpdate))
        {
            if (detalleUpdate.Categoria.Id==0)
            {
                detalle.Categoria.Id = 0;
                detalle.Categoria.Descripcion = "";
            }
            else
            {
                if (detalleUpdate.Categoria.Id != detalle.Categoria.Id)
                {
                    detalle.Categoria.Id = detalleUpdate.Categoria.Id;
                    detalle.Categoria.Descripcion = BuscarDescripcionCategoria(detalleUpdate.Categoria.Id);
                    //                    detalle.Categoria.Descripcion = categorias.Find(x => x.Id == detalleUpdate.Categoria.Id).Descripcion;
                }
            }

            if (detalleUpdate.Usuario.Id==0)
            {
                detalle.Usuario.Id = 0;
                detalle.Usuario.Nombre = "";
            }
            else
            {
                if (detalleUpdate.Usuario.Id != detalle.Usuario.Id)
                {
                    detalle.Usuario.Id = detalleUpdate.Usuario.Id;
                    detalle.Usuario.Nombre = BuscarNombreUsuario(detalleUpdate.Usuario.Id);
//                    detalle.Usuario.Nombre = usuarios.Find(x => x.Id == detalleUpdate.Usuario.Id).Nombre;
                }
            }

            detalle.Activo = detalleUpdate.Activo;
            detalle.ImporteHora = detalleUpdate.ImporteHora;
            detalle.Fecha = detalleUpdate.Fecha;
        }
    }

    private async Task CrearDetalle()
    {
        var nuevoDetalle = new TarifaDetalleDTO
        {
            Fecha = DateTime.Today,
            Categoria = new CategoriaDTOmin(),
            Usuario = new UsuarioDTOmin()
        };

        if (await ModalShow(nuevoDetalle))
        {
            //if (nuevoDetalle.Categoria.Id != 0)
            //{
            //    nuevoDetalle.Categoria.Descripcion = categorias.Find(x => x.Id == nuevoDetalle.Categoria.Id).Descripcion;
            //}

            //if (nuevoDetalle.Usuario.Id != 0)
            //{
            //    nuevoDetalle.Usuario.Nombre = usuarios.Find(x => x.Id == nuevoDetalle.Usuario.Id).Nombre;
            //}

            nuevoDetalle.Categoria.Descripcion = BuscarDescripcionCategoria(nuevoDetalle.Categoria.Id);
            nuevoDetalle.Usuario.Nombre = BuscarNombreUsuario(nuevoDetalle.Usuario.Id);

            detalles.Add(nuevoDetalle);
        }
    }

    private async Task<bool> ModalShow(TarifaDetalleDTO detalle)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DetalleTarifa.Item), detalle);
        parameters.Add(nameof(DetalleTarifa.Categorias), categorias);
        parameters.Add(nameof(DetalleTarifa.Usuarios), usuarios);

        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            HideHeader = true
        };

        var detalleModal = Modal.Show<DetalleTarifa>("", parameters, options);
        var result = await detalleModal.Result;

        return !result.Cancelled;
    }

    private async Task Guardar()
    {
        Item.Detalle.Clear();
        Item.Detalle.AddRange(detalles);


        await OnValidSubmit.InvokeAsync();
    }

    private string BuscarDescripcionCategoria(int id)
    {
        if (id!=0)
        {
            return categorias.Find(x => x.Id == id)?.Descripcion;
        }

        return "";
    }

    private string BuscarNombreUsuario(int id)
    {
        if (id != 0)
        {
            return usuarios.Find(x => x.Id == id)?.Nombre;
        }

        return "";
    }

}
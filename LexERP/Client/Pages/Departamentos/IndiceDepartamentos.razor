@page "/departamentos"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@attribute [Authorize]

<h3 class="text-corporativo">Indice Departamentos</h3>

<div>
    <a href="/areas/crear" class="btn btn-primary">Crear nuevo departamento</a>
    <br/>
</div>

<Paginacion PaginaActual="paginaActual" PaginaSeleccionada="PaginaSeleccionada" PaginasTotales="paginasTotales" />

<ListadoGenerico Listado="Departamentos">
    <NoHayRegistros>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Abrv.</th>
                    <th>Descripción</th>
                    <th>Orden</th>
                </tr>
            </thead>
        </table>
        <br />
        <text>No hay registros para mostrar</text>
    </NoHayRegistros>
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Abrv.</th>
                    <th>Descripción</th>
                    <th>Orden</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Departamentos)
                {
                    <tr>
                        <td>
                            <a href="departamento/editar/@item.Id" class="btn btn-success">Editar</a>
                            @*<button @onclick="@(()=> BorrarCliente(item))" class="btn btn-danger">Borrar</button>*@
                        </td>
                        <td>@item.Abreviatura</td>
                        <td>@item.Descripcion</td>
                        <td>@item.Orden</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>


@code {
    public List<DepartamentoDTO> Departamentos { get; set; }

    private int paginaActual = 1;
    private int paginasTotales;

    protected override async Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    private async Task Cargar(int pagina = 1)
    {
        var httpResponse = await repositorio.Get<List<DepartamentoDTO>>($"api/departamentos?pagina={pagina}");

        if (!httpResponse.Error)
        {
            Departamentos = httpResponse.Response;
            paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }

    //private async Task BorrarCliente(ClienteDTO cliente)
    //{
    //    var httpResponse = await repositorio.Delete($"api/clientes/{cliente.Id}");

    //    if (httpResponse.Error)
    //    {
    //        await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
    //    }
    //    else
    //    {
    //        await Cargar();
    //    }
    //}

}
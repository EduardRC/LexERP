@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">LexERP</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    @if (menu == null)
    {
        <Cargando Invert="true" />
    }
    else
    {
        <ul class="nav flex-column">
            @foreach (var item in menu.Where(x => x.ParentId == null).OrderBy(x => x.Position))
            {
                <li class="nav-item px-3">
                    @if (item.PageName != "" || item.MenuName == "Inicio")
                    {
                        <NavLink class="nav-link" href="@item.PageName" @onclick="()=>GetIsClicked(item)" Match="NavLinkMatch.All">
                            <span class="@item.IconName" aria-hidden="true"></span> @item.MenuName
                        </NavLink>
                    }
                    else
                    {
                        //Creada esta opcion, sin "href" para cuando no hay enlace (es un submenu), para que no lo enlace con el INICIO
                        <NavLink class="nav-link" @onclick="()=>GetIsClicked(item)">
                            <span class="@item.IconName" aria-hidden="true"></span> @item.MenuName
                        </NavLink>
                    }
                    <ul class="nav flex-column">
                        @foreach (var subItem in menu.Where(x => x.ParentId == item.Id).OrderBy(x => x.Position))
                        {
                            @if (expandSubNav && item.Id == clickedMenu)
                            {
                                <li class="nav-item px-3">
                                    <NavLink class="nav-link" href="@subItem.PageName">
                                        <span class="@subItem.IconName" aria-hidden="true"></span> @subItem.MenuName
                                    </NavLink>
                                </li>
                            }
                        }
                    </ul>
                </li>
            }
        </ul>
    }
</div>

@code {
    private bool collapseNavMenu = true;

    private List<MenuDTO> menu;
    private int clickedMenu = 0;
    private int prevClickedMenu = 0;
    private bool expandSubNav;
    private bool hasPageName = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = (!collapseNavMenu && !expandSubNav);
    }

    private void GetIsClicked(MenuDTO menu)
    {
        clickedMenu = menu.Id;

        if (prevClickedMenu != clickedMenu)
        {
            expandSubNav = false;
            if (menu.PageName != "" || menu.MenuName == "Inicio")
            {
                hasPageName = true;
            }
            else
            {
                expandSubNav = !expandSubNav;
                hasPageName = false;
            }
        }
        else
        {
            expandSubNav = !expandSubNav;
        }

        prevClickedMenu = clickedMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<List<MenuDTO>>("api/menu");

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            menu = httpResponse.Response;
        }
    }

}
